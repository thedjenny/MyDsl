/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Layer_VisibleTrueSimulatedTrueLockedFalseKeyword_2_q;
	protected AbstractElementAlias match_NetlistType_NetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0_q;
	protected AbstractElementAlias match_Tag___INTTerminalRuleCall_5_2_or_STRINGTerminalRuleCall_5_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Layer_VisibleTrueSimulatedTrueLockedFalseKeyword_2_q = new TokenAlias(false, true, grammarAccess.getLayerAccess().getVisibleTrueSimulatedTrueLockedFalseKeyword_2());
		match_NetlistType_NetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0_q = new TokenAlias(false, true, grammarAccess.getNetlistTypeAccess().getNetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0());
		match_Tag___INTTerminalRuleCall_5_2_or_STRINGTerminalRuleCall_5_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getTagAccess().getINTTerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getTagAccess().getSTRINGTerminalRuleCall_5_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Layer_VisibleTrueSimulatedTrueLockedFalseKeyword_2_q.equals(syntax))
				emit_Layer_VisibleTrueSimulatedTrueLockedFalseKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetlistType_NetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0_q.equals(syntax))
				emit_NetlistType_NetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tag___INTTerminalRuleCall_5_2_or_STRINGTerminalRuleCall_5_1__q.equals(syntax))
				emit_Tag___INTTerminalRuleCall_5_2_or_STRINGTerminalRuleCall_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ' Visible="true" Simulated="true" Locked="false"'?
	 *
	 * This ambiguous syntax occurs at:
	 *     coucheName=STRING (ambiguity) '&gt;' '&lt;/layer&gt;' (rule end)
	 *     coucheName=STRING (ambiguity) '&gt;' components+=Component
	 
	 * </pre>
	 */
	protected void emit_Layer_VisibleTrueSimulatedTrueLockedFalseKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '&lt;netlist xmlns="urn:netlist-schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:netlist-schema ValidationRules.xsd" &gt;
	  *     	&lt;!--Famic Technologies Inc.--&gt;
	  *     	&lt;!--Automation Studio--&gt;
	  *     	&lt;!--Export--&gt;'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '&lt;documents&gt;' '&lt;document Name=' docname=STRING
	 
	 * </pre>
	 */
	protected void emit_NetlistType_NetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (STRING | INT)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tagName=STRING '&gt;' (ambiguity) '&lt;/t' tagNum=INT
	 
	 * </pre>
	 */
	protected void emit_Tag___INTTerminalRuleCall_5_2_or_STRINGTerminalRuleCall_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
