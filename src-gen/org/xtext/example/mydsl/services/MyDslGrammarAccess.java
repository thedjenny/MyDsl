/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ExportModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExportModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlVersion10EncodingUTF16Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExportNetlistTypeParserRuleCall_1_0 = (RuleCall)cExportAssignment_1.eContents().get(0);
		
		//ExportModel:
		//    '<?xml version = "1.0" encoding = "UTF-16"?>'
		//    export = NetlistType;
		@Override public ParserRule getRule() { return rule; }
		
		//'<?xml version = "1.0" encoding = "UTF-16"?>'
		//export = NetlistType
		public Group getGroup() { return cGroup; }
		
		//'<?xml version = "1.0" encoding = "UTF-16"?>'
		public Keyword getXmlVersion10EncodingUTF16Keyword_0() { return cXmlVersion10EncodingUTF16Keyword_0; }
		
		//export = NetlistType
		public Assignment getExportAssignment_1() { return cExportAssignment_1; }
		
		//NetlistType
		public RuleCall getExportNetlistTypeParserRuleCall_1_0() { return cExportNetlistTypeParserRuleCall_1_0; }
	}
	public class NetlistTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NetlistType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDocumentsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDocumentNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDocnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDocnameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDocnameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDiagramTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDoctypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDoctypeSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cDoctypeAssignment_4_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLayerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayerLayerParserRuleCall_6_0 = (RuleCall)cLayerAssignment_6.eContents().get(0);
		private final Keyword cDocumentKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDocumentsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNodesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNodesNodesParserRuleCall_9_0 = (RuleCall)cNodesAssignment_9.eContents().get(0);
		private final Keyword cNetlistKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//NetlistType:
		//    ('<netlist xmlns="urn:netlist-schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:netlist-schema ValidationRules.xsd" >
		//    <!--Famic Technologies Inc.-->
		//    <!--Automation Studio-->
		//    <!--Export-->')?
		//    '<documents>'
		//    '<document Name=' docname=STRING(' DiagramType='doctype=STRING)?'>'
		//    layer+= Layer*
		//    '</document>'
		//    '</documents>'
		//    nodes = Nodes
		//    '</netlist>'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//('<netlist xmlns="urn:netlist-schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:netlist-schema ValidationRules.xsd" >
		//<!--Famic Technologies Inc.-->
		//<!--Automation Studio-->
		//<!--Export-->')?
		//'<documents>'
		//'<document Name=' docname=STRING(' DiagramType='doctype=STRING)?'>'
		//layer+= Layer*
		//'</document>'
		//'</documents>'
		//nodes = Nodes
		//'</netlist>'
		public Group getGroup() { return cGroup; }
		
		//('<netlist xmlns="urn:netlist-schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:netlist-schema ValidationRules.xsd" >
		//<!--Famic Technologies Inc.-->
		//<!--Automation Studio-->
		//<!--Export-->')?
		public Keyword getNetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0() { return cNetlistXmlnsUrnNetlistSchemaXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceXsiSchemaLocationUrnNetlistSchemaValidationRulesXsdFamicTechnologiesIncAutomationStudioExportKeyword_0; }
		
		//'<documents>'
		public Keyword getDocumentsKeyword_1() { return cDocumentsKeyword_1; }
		
		//'<document Name='
		public Keyword getDocumentNameKeyword_2() { return cDocumentNameKeyword_2; }
		
		//docname=STRING
		public Assignment getDocnameAssignment_3() { return cDocnameAssignment_3; }
		
		//STRING
		public RuleCall getDocnameSTRINGTerminalRuleCall_3_0() { return cDocnameSTRINGTerminalRuleCall_3_0; }
		
		//(' DiagramType='doctype=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//' DiagramType='
		public Keyword getDiagramTypeKeyword_4_0() { return cDiagramTypeKeyword_4_0; }
		
		//doctype=STRING
		public Assignment getDoctypeAssignment_4_1() { return cDoctypeAssignment_4_1; }
		
		//STRING
		public RuleCall getDoctypeSTRINGTerminalRuleCall_4_1_0() { return cDoctypeSTRINGTerminalRuleCall_4_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//layer+= Layer*
		public Assignment getLayerAssignment_6() { return cLayerAssignment_6; }
		
		//Layer
		public RuleCall getLayerLayerParserRuleCall_6_0() { return cLayerLayerParserRuleCall_6_0; }
		
		//'</document>'
		public Keyword getDocumentKeyword_7() { return cDocumentKeyword_7; }
		
		//'</documents>'
		public Keyword getDocumentsKeyword_8() { return cDocumentsKeyword_8; }
		
		//nodes = Nodes
		public Assignment getNodesAssignment_9() { return cNodesAssignment_9; }
		
		//Nodes
		public RuleCall getNodesNodesParserRuleCall_9_0() { return cNodesNodesParserRuleCall_9_0; }
		
		//'</netlist>'
		public Keyword getNetlistKeyword_10() { return cNetlistKeyword_10; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCoucheNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoucheNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cCoucheNameAssignment_1.eContents().get(0);
		private final Keyword cVisibleTrueSimulatedTrueLockedFalseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Keyword cLayerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Layer:
		//    '<layer Name=' coucheName=STRING (' Visible="true" Simulated="true" Locked="false"')?'>'
		//     components += Component*
		//    '</layer>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<layer Name=' coucheName=STRING (' Visible="true" Simulated="true" Locked="false"')?'>'
		// components += Component*
		//'</layer>'
		public Group getGroup() { return cGroup; }
		
		//'<layer Name='
		public Keyword getLayerNameKeyword_0() { return cLayerNameKeyword_0; }
		
		//coucheName=STRING
		public Assignment getCoucheNameAssignment_1() { return cCoucheNameAssignment_1; }
		
		//STRING
		public RuleCall getCoucheNameSTRINGTerminalRuleCall_1_0() { return cCoucheNameSTRINGTerminalRuleCall_1_0; }
		
		//(' Visible="true" Simulated="true" Locked="false"')?
		public Keyword getVisibleTrueSimulatedTrueLockedFalseKeyword_2() { return cVisibleTrueSimulatedTrueLockedFalseKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//components += Component*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_4_0() { return cComponentsComponentParserRuleCall_4_0; }
		
		//'</layer>'
		public Keyword getLayerKeyword_5() { return cLayerKeyword_5; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentComponentIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompoIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompoIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cCompoIdAssignment_1.eContents().get(0);
		private final Keyword cIDAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCompoIdaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompoIdaSTRINGTerminalRuleCall_3_0 = (RuleCall)cCompoIdaAssignment_3.eContents().get(0);
		private final Keyword cIDFKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompoIdfAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompoIdfSTRINGTerminalRuleCall_5_0 = (RuleCall)cCompoIdfAssignment_5.eContents().get(0);
		private final Keyword cIDTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCompoIdtAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompoIdtSTRINGTerminalRuleCall_7_0 = (RuleCall)cCompoIdtAssignment_7.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVarsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVarsVariableParserRuleCall_9_0 = (RuleCall)cVarsAssignment_9.eContents().get(0);
		private final Keyword cComponentKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Component :
		//    '<component ComponentID='compoId = STRING' IDA='compoIda = STRING' IDF='compoIdf = STRING' IDT='compoIdt = STRING'>'
		//    vars +=Variable*
		//'</component>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    '<component ComponentID='compoId = STRING' IDA='compoIda = STRING' IDF='compoIdf = STRING' IDT='compoIdt = STRING'>'
		//    vars +=Variable*
		//'</component>'
		public Group getGroup() { return cGroup; }
		
		//'<component ComponentID='
		public Keyword getComponentComponentIDKeyword_0() { return cComponentComponentIDKeyword_0; }
		
		//compoId = STRING
		public Assignment getCompoIdAssignment_1() { return cCompoIdAssignment_1; }
		
		//STRING
		public RuleCall getCompoIdSTRINGTerminalRuleCall_1_0() { return cCompoIdSTRINGTerminalRuleCall_1_0; }
		
		//' IDA='
		public Keyword getIDAKeyword_2() { return cIDAKeyword_2; }
		
		//compoIda = STRING
		public Assignment getCompoIdaAssignment_3() { return cCompoIdaAssignment_3; }
		
		//STRING
		public RuleCall getCompoIdaSTRINGTerminalRuleCall_3_0() { return cCompoIdaSTRINGTerminalRuleCall_3_0; }
		
		//' IDF='
		public Keyword getIDFKeyword_4() { return cIDFKeyword_4; }
		
		//compoIdf = STRING
		public Assignment getCompoIdfAssignment_5() { return cCompoIdfAssignment_5; }
		
		//STRING
		public RuleCall getCompoIdfSTRINGTerminalRuleCall_5_0() { return cCompoIdfSTRINGTerminalRuleCall_5_0; }
		
		//' IDT='
		public Keyword getIDTKeyword_6() { return cIDTKeyword_6; }
		
		//compoIdt = STRING
		public Assignment getCompoIdtAssignment_7() { return cCompoIdtAssignment_7; }
		
		//STRING
		public RuleCall getCompoIdtSTRINGTerminalRuleCall_7_0() { return cCompoIdtSTRINGTerminalRuleCall_7_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
		
		//vars +=Variable*
		public Assignment getVarsAssignment_9() { return cVarsAssignment_9; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_9_0() { return cVarsVariableParserRuleCall_9_0; }
		
		//'</component>'
		public Keyword getComponentKeyword_10() { return cComponentKeyword_10; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariable_typeNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTagsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTagsTagParserRuleCall_3_0 = (RuleCall)cTagsAssignment_3.eContents().get(0);
		private final Keyword cVariable_typeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable:
		//    '<variable_type Name='varName=STRING'>'
		//    tags += Tag*
		//    '</variable_type>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<variable_type Name='varName=STRING'>'
		//tags += Tag*
		//'</variable_type>'
		public Group getGroup() { return cGroup; }
		
		//'<variable_type Name='
		public Keyword getVariable_typeNameKeyword_0() { return cVariable_typeNameKeyword_0; }
		
		//varName=STRING
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//STRING
		public RuleCall getVarNameSTRINGTerminalRuleCall_1_0() { return cVarNameSTRINGTerminalRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//tags += Tag*
		public Assignment getTagsAssignment_3() { return cTagsAssignment_3; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_3_0() { return cTagsTagParserRuleCall_3_0; }
		
		//'</variable_type>'
		public Keyword getVariable_typeKeyword_4() { return cVariable_typeKeyword_4; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagNumINTTerminalRuleCall_1_0 = (RuleCall)cTagNumAssignment_1.eContents().get(0);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTagNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTagNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cTagNameAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cVarAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_5_0_0 = (RuleCall)cVarAssignment_5_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final Keyword cTKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTagNumAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTagNumINTTerminalRuleCall_7_0 = (RuleCall)cTagNumAssignment_7.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Tag:
		//    '<t'tagNum=INT' Name='tagName=STRING'>'(var= ID | STRING | INT)?'</t'tagNum=INT'>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<t'tagNum=INT' Name='tagName=STRING'>'(var= ID | STRING | INT)?'</t'tagNum=INT'>'
		public Group getGroup() { return cGroup; }
		
		//'<t'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//tagNum=INT
		public Assignment getTagNumAssignment_1() { return cTagNumAssignment_1; }
		
		//INT
		public RuleCall getTagNumINTTerminalRuleCall_1_0() { return cTagNumINTTerminalRuleCall_1_0; }
		
		//' Name='
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//tagName=STRING
		public Assignment getTagNameAssignment_3() { return cTagNameAssignment_3; }
		
		//STRING
		public RuleCall getTagNameSTRINGTerminalRuleCall_3_0() { return cTagNameSTRINGTerminalRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//(var= ID | STRING | INT)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//var= ID
		public Assignment getVarAssignment_5_0() { return cVarAssignment_5_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_5_0_0() { return cVarIDTerminalRuleCall_5_0_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_1() { return cSTRINGTerminalRuleCall_5_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_2() { return cINTTerminalRuleCall_5_2; }
		
		//'</t'
		public Keyword getTKeyword_6() { return cTKeyword_6; }
		
		//tagNum=INT
		public Assignment getTagNumAssignment_7() { return cTagNumAssignment_7; }
		
		//INT
		public RuleCall getTagNumINTTerminalRuleCall_7_0() { return cTagNumINTTerminalRuleCall_7_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class NodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Nodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		private final Keyword cNodesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Nodes:
		//    '<nodes>'
		//    nodes+= Node*
		//    '</nodes>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<nodes>'
		//nodes+= Node*
		//'</nodes>'
		public Group getGroup() { return cGroup; }
		
		//'<nodes>'
		public Keyword getNodesKeyword_0() { return cNodesKeyword_0; }
		
		//nodes+= Node*
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_1_0() { return cNodesNodeParserRuleCall_1_0; }
		
		//'</nodes>'
		public Keyword getNodesKeyword_2() { return cNodesKeyword_2; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNodeNameAssignment_1.eContents().get(0);
		private final Keyword cTechnologyBlocKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinksLinkParserRuleCall_3_0 = (RuleCall)cLinksAssignment_3.eContents().get(0);
		private final Keyword cNodeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Node:
		//    '<node Name='nodeName=STRING' Technology="Bloc">'
		//         links += Link*
		//     '</node>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<node Name='nodeName=STRING' Technology="Bloc">'
		//     links += Link*
		// '</node>'
		public Group getGroup() { return cGroup; }
		
		//'<node Name='
		public Keyword getNodeNameKeyword_0() { return cNodeNameKeyword_0; }
		
		//nodeName=STRING
		public Assignment getNodeNameAssignment_1() { return cNodeNameAssignment_1; }
		
		//STRING
		public RuleCall getNodeNameSTRINGTerminalRuleCall_1_0() { return cNodeNameSTRINGTerminalRuleCall_1_0; }
		
		//' Technology="Bloc">'
		public Keyword getTechnologyBlocKeyword_2() { return cTechnologyBlocKeyword_2; }
		
		//links += Link*
		public Assignment getLinksAssignment_3() { return cLinksAssignment_3; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_3_0() { return cLinksLinkParserRuleCall_3_0; }
		
		//'</node>'
		public Keyword getNodeKeyword_4() { return cNodeKeyword_4; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkCompIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompIDSTRINGTerminalRuleCall_1_0 = (RuleCall)cCompIDAssignment_1.eContents().get(0);
		private final Keyword cPortIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortIDSTRINGTerminalRuleCall_3_0 = (RuleCall)cPortIDAssignment_3.eContents().get(0);
		private final Keyword cPortNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cPortNameAssignment_5.eContents().get(0);
		private final Keyword cPortDirectionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortName2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortName2STRINGTerminalRuleCall_7_0 = (RuleCall)cPortName2Assignment_7.eContents().get(0);
		private final Assignment cBaliseFermanteAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBaliseFermanteBaliseParserRuleCall_8_0 = (RuleCall)cBaliseFermanteAssignment_8.eContents().get(0);
		
		//Link:
		//    '<link CompID='CompID=STRING' PortID='portID=STRING' PortName='portName=STRING' PortDirection='portName2=STRING baliseFermante = Balise
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'<link CompID='CompID=STRING' PortID='portID=STRING' PortName='portName=STRING' PortDirection='portName2=STRING baliseFermante = Balise
		public Group getGroup() { return cGroup; }
		
		//'<link CompID='
		public Keyword getLinkCompIDKeyword_0() { return cLinkCompIDKeyword_0; }
		
		//CompID=STRING
		public Assignment getCompIDAssignment_1() { return cCompIDAssignment_1; }
		
		//STRING
		public RuleCall getCompIDSTRINGTerminalRuleCall_1_0() { return cCompIDSTRINGTerminalRuleCall_1_0; }
		
		//' PortID='
		public Keyword getPortIDKeyword_2() { return cPortIDKeyword_2; }
		
		//portID=STRING
		public Assignment getPortIDAssignment_3() { return cPortIDAssignment_3; }
		
		//STRING
		public RuleCall getPortIDSTRINGTerminalRuleCall_3_0() { return cPortIDSTRINGTerminalRuleCall_3_0; }
		
		//' PortName='
		public Keyword getPortNameKeyword_4() { return cPortNameKeyword_4; }
		
		//portName=STRING
		public Assignment getPortNameAssignment_5() { return cPortNameAssignment_5; }
		
		//STRING
		public RuleCall getPortNameSTRINGTerminalRuleCall_5_0() { return cPortNameSTRINGTerminalRuleCall_5_0; }
		
		//' PortDirection='
		public Keyword getPortDirectionKeyword_6() { return cPortDirectionKeyword_6; }
		
		//portName2=STRING
		public Assignment getPortName2Assignment_7() { return cPortName2Assignment_7; }
		
		//STRING
		public RuleCall getPortName2STRINGTerminalRuleCall_7_0() { return cPortName2STRINGTerminalRuleCall_7_0; }
		
		//baliseFermante = Balise
		public Assignment getBaliseFermanteAssignment_8() { return cBaliseFermanteAssignment_8; }
		
		//Balise
		public RuleCall getBaliseFermanteBaliseParserRuleCall_8_0() { return cBaliseFermanteBaliseParserRuleCall_8_0; }
	}
	public class BaliseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Balise");
		private final Keyword cSolidusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Balise:
		//    '/>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword() { return cSolidusGreaterThanSignKeyword; }
	}
	
	
	private final ExportModelElements pExportModel;
	private final NetlistTypeElements pNetlistType;
	private final LayerElements pLayer;
	private final ComponentElements pComponent;
	private final VariableElements pVariable;
	private final TagElements pTag;
	private final NodesElements pNodes;
	private final NodeElements pNode;
	private final LinkElements pLink;
	private final BaliseElements pBalise;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExportModel = new ExportModelElements();
		this.pNetlistType = new NetlistTypeElements();
		this.pLayer = new LayerElements();
		this.pComponent = new ComponentElements();
		this.pVariable = new VariableElements();
		this.pTag = new TagElements();
		this.pNodes = new NodesElements();
		this.pNode = new NodeElements();
		this.pLink = new LinkElements();
		this.pBalise = new BaliseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ExportModel:
	//    '<?xml version = "1.0" encoding = "UTF-16"?>'
	//    export = NetlistType;
	public ExportModelElements getExportModelAccess() {
		return pExportModel;
	}
	
	public ParserRule getExportModelRule() {
		return getExportModelAccess().getRule();
	}
	
	//NetlistType:
	//    ('<netlist xmlns="urn:netlist-schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:netlist-schema ValidationRules.xsd" >
	//    <!--Famic Technologies Inc.-->
	//    <!--Automation Studio-->
	//    <!--Export-->')?
	//    '<documents>'
	//    '<document Name=' docname=STRING(' DiagramType='doctype=STRING)?'>'
	//    layer+= Layer*
	//    '</document>'
	//    '</documents>'
	//    nodes = Nodes
	//    '</netlist>'
	//        ;
	public NetlistTypeElements getNetlistTypeAccess() {
		return pNetlistType;
	}
	
	public ParserRule getNetlistTypeRule() {
		return getNetlistTypeAccess().getRule();
	}
	
	//Layer:
	//    '<layer Name=' coucheName=STRING (' Visible="true" Simulated="true" Locked="false"')?'>'
	//     components += Component*
	//    '</layer>'
	//;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//Component :
	//    '<component ComponentID='compoId = STRING' IDA='compoIda = STRING' IDF='compoIdf = STRING' IDT='compoIdt = STRING'>'
	//    vars +=Variable*
	//'</component>'
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Variable:
	//    '<variable_type Name='varName=STRING'>'
	//    tags += Tag*
	//    '</variable_type>'
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Tag:
	//    '<t'tagNum=INT' Name='tagName=STRING'>'(var= ID | STRING | INT)?'</t'tagNum=INT'>'
	//;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//Nodes:
	//    '<nodes>'
	//    nodes+= Node*
	//    '</nodes>'
	//;
	public NodesElements getNodesAccess() {
		return pNodes;
	}
	
	public ParserRule getNodesRule() {
		return getNodesAccess().getRule();
	}
	
	//Node:
	//    '<node Name='nodeName=STRING' Technology="Bloc">'
	//         links += Link*
	//     '</node>'
	//;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Link:
	//    '<link CompID='CompID=STRING' PortID='portID=STRING' PortName='portName=STRING' PortDirection='portName2=STRING baliseFermante = Balise
	//    ;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Balise:
	//    '/>'
	//;
	public BaliseElements getBaliseAccess() {
		return pBalise;
	}
	
	public ParserRule getBaliseRule() {
		return getBaliseAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
